<?php
namespace Encodez\Superform;

use Encodez\Superform\Exceptions\ElementNotFoundException;
use Encodez\Superform\Exceptions\InvalidAttributeException;
use Phalcon\Forms\Element;
use Phalcon\Forms\Element\Date;
use Phalcon\Forms\Element\Email;
use Phalcon\Forms\Element\File;
use Phalcon\Forms\Element\Numeric;
use Phalcon\Forms\Element\Radio;
use Phalcon\Forms\Element\Select;
use Phalcon\Forms\Element\Submit;
use Phalcon\Forms\Element\TextArea;
use Phalcon\Forms\Form as PhalconForm;
use Phalcon\Http\Request;
use Phalcon\Forms\Element\Text;
use Phalcon\Forms\Element\Hidden;
use Phalcon\Forms\Element\Check;
use Phalcon\Validation\Validator\PresenceOf;
use Phalcon\Validation\Validator\StringLength;
use Phalcon\Validation\Validator\Email as EmailValidator;

abstract class Form extends PhalconForm
{
    /////////////////////////////////////////////
    // constants
    /////////////////////////////////////////////

    const METHOD_POST = 'post';
    const METHOD_GET = 'get';

    /////////////////////////////////////////////
    // PROTECTED PROPERTIES
    /////////////////////////////////////////////
    /**
     * @var Request
     */
    protected $request;

    /**
     * @var string Form request method
     */
    protected $method;

    /////////////////////////////////////////////
    // ABSTRACT METHODS
    /////////////////////////////////////////////
    /**
     * Create form fields
     *
     * @return string|array
     */
    abstract function getFields();

    /**
     * Create validation rules for fields
     *
     * @return string|array
     */
    abstract function getRules();

    /**
     * Create filters for form fields
     *
     * @return string|array
     */
    abstract function getFilters();

    /**
     * Create custom error messages for form.
     *
     * @return string|array
     */
    abstract function getCustomMessages();


    /////////////////////////////////////////////
    // PUBLIC METHODS
    /////////////////////////////////////////////

    /**
     * Get form request method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->method;
    }

    /**
     * Set form request method
     *
     * @param string $method
     */
    public function setMethod($method)
    {
        $this->method = $method;
    }

    /**
     * Set request variable
     *
     * @param Request $request
     */
    public function setRequest(Request $request)
    {
        $this->request = $request;
    }

    /**
     * Return CSRF toekn generated by injected security module
     *
     * @return string
     */
    public function getCsrf()
    {
        return $this->security->getToken();
    }

    /**
     * Initialize the form
     */
    public function initialize()
    {
        foreach ($this->getFields() as $key => $items) {
            $element = $this->_create_field($key, $items);

            $this->add($element);
        }
    }


    /////////////////////////////////////////////
    // PRIVATE METHODS
    /////////////////////////////////////////////

    /**
     * @param string $field_name
     * @param array $options
     *
     * @return Element
     * @throws ElementNotFoundException
     */
    private function _create_field($field_name, array $options)
    {
        $field_type = array_shift($options);
        $element = $this->_get_field($field_name, $field_type, $options);
        $this->_set_validators($element, $field_name);

        // TODO: create field with element and validation

        return $element;
    }

    /**
     * @param string $field_name
     * @param string $type
     * @param array $attributes
     *
     * @return Element
     * @throws ElementNotFoundException
     */
    private function _get_field($field_name, $type, array $attributes = null)
    {
        $element = $label = null;

        if (isset($attributes[0]))
            $label = array_shift($attributes);

        if (is_null($attributes))
            $attributes = array();

        switch (strtolower($type))
        {
            case 'hidden':
                $element = new Hidden($field_name);
                break;
            case 'textarea':
                $element = new TextArea($field_name);
                break;
            case 'select':
                $element = new Select($field_name);
                break;
            case 'check':
                $element = new Check($field_name);
                break;
            case 'radio':
                $element = new Radio($field_name);
                break;
            case 'file':
                $element = new File($field_name);
                break;
            case 'submit':
                $element = new Submit($field_name);
                break;
            case 'date':
                $element = new Date($field_name);
                break;
            case 'email':
                $element = new Email($field_name);
                break;
            case 'numeric':
                $element = new Numeric($field_name);
                break;
            case 'text':
                $element = new Text($field_name);
                break;
            default:
                throw new ElementNotFoundException();
        }

        if (!is_null($label))
            $element->setLabel($label);

        $this->_set_attributes($element, $attributes);

        return $element;
    }

    /**
     * @param $element
     * @param array $attributes
     * @throws InvalidAttributeException
     */
    private function _set_attributes(Element &$element, array $attributes = null)
    {
        if (!is_null($attributes) && count($attributes) > 0) {
            foreach ($attributes as $attribute) {
                try {
                    $attr = preg_split('/:/', $attribute, 0, PREG_SPLIT_NO_EMPTY);
                    if (count($attr) <> 2) {
                        throw new InvalidAttributeException('Invalid attribute - ' . $attribute);
                    }
                    $element->setAttribute($attr[0], $attr[1]);
                }
                catch (\Exception $ex) {
                    throw new InvalidAttributeException('Invalid attribute - ' . $attribute);
                }
            }
        }
    }

    /**
     * @param string $field_name
     *
     * @return array
     */
    private function _set_validators(Element &$element, $field_name)
    {
        $messages = $this->getCustomMessages();

        $rules_values = $this->getRules();
        $rules_values = isset($rules_values[$field_name]) ? $rules_values[$field_name] : null;
        if (!is_null($rules_values)) {
            $rules = explode('|', $rules_values);
        }

        if (!is_null($rules) && count($rules) > 0) {
            foreach ($rules as $rule) {
                $validator = $this->_get_validator($field_name, $rule, $messages);

                if (!is_null($validator))
                    $element->addValidator($validator);
            }
        }
    }

    /**
     * @param string $field_name
     * @param string rule
     * @param array $messages
     * @return \Phalcon\Validation\ValidatorInterface
     */
    private function _get_validator($field_name, $rule, array $messages = null)
    {
        $validator = $message = null;

        $message_field = $field_name . ':' . $rule;

        $rule = strtolower($rule);
        if ($rule == 'required')
            $validator = new PresenceOf();
        else if ($rule == 'email')
            $validator = new EmailValidator();
        else {
            try {
                $rr = preg_split('/:/', $rule, 0, PREG_SPLIT_NO_EMPTY);
                if (count($rr) >= 2) {
                    if ($rr[0] == 'length') {
                        $values = explode(',', $rr[1]);
                        if (count($values) == 2) {
                            $validator = new StringLength(
                                array('min' => $values[0], 'max' => $values[1])
                            );
                        }
                    }
                }
            }
            catch (\Exception $ex){
                // ignore error
            }
        }

        $message = isset($messages[$message_field]) ? $messages[$message_field] : null;
        if (!is_null($validator) && !is_null($message))
            $validator->setOption('message', $message);

        return $validator;
    }
}